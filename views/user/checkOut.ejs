<%- include ('../../layout/header.ejs') %>
    <div class="page-wrapper">
        <header class="header">
            <div class="header-top">
                <div class="container">
                    <div class="header-left">
                        <div class="header-dropdown">

                        </div>

                        <div class="header-dropdown">
                            <a href="#">Eng</a>

                        </div>
                    </div>

                    <div class="header-right">
                        <ul class="top-menu">
                            <li>
                                <a href="#">Links</a>
                                <ul>
                                    <li><a href="/wishlist"><i class="icon-heart-o"></i>Wishlist <span></span></a></li>
                                    <% if (locals.user) { %>
                                        <li><a href="/logout">Logout</a></li>
                                        <li><a href="/userDashboard">
                                                <%=user.name%>
                                            </a></li>
                                        <% } else { %>
                                            <li><a href="/login"><i class="icon-user"></i>Login</a></li>
                                            <% } %>
                                </ul>
                            </li>
                        </ul><!-- End .top-menu -->
                    </div><!-- End .header-right -->
                </div>
            </div><!-- End .header-top -->

            <div class="header-middle sticky-header">
                <div class="container">
                    <div class="header-left">
                        <button class="mobile-menu-toggler">
                            <span class="sr-only">Toggle mobile menu</span>
                            <i class="icon-bars"></i>
                        </button>

                        <a href="index.html" class="logo">
                            <img src="assets/images/wonder.png" alt="Molla Logo" width="105" height="25">
                        </a>


                        <nav class="main-nav">
                            <ul class="menu sf-arrows">
                                <li>
                                    <a href="/" class="sf-with-ul">Home</a>


                                </li>
                                <li>
                                    <a href="/productList" class="sf-with-ul">Shop</a>


                                </li>




                            </ul>
                        </nav>
                    </div>

                    <div class="header-right">
                        <div class="header-search">
                            <a href="#" class="search-toggle" role="button" title="Search"><i
                                    class="icon-search"></i></a>
                            <form id="search">
                                <div class="header-search-wrapper">
                                    <label for="q" class="sr-only">Search</label>
                                    <input type="search" class="form-control" name="q" id="q" placeholder="Search in..."
                                        required>
                                </div>
                            </form>
                        </div>


                        <div class="dropdown cart-dropdown">
                            <a href="/cart" class="dropdown-toggle" role="button" data-toggle="dropdown"
                                aria-haspopup="true" aria-expanded="false">
                                <i class="icon-shopping-cart"></i>

                            </a>


                        </div>
                    </div>
                </div>
            </div>
        </header>

        <main class="main">
            <div class="page-header text-center" style="background-image: url('assets/images/page-header-bg.jpg')">
                <div class="container">
                    <h1 class="page-title">Checkout<span>Shop</span></h1>
                </div>
            </div>
            <nav aria-label="breadcrumb" class="breadcrumb-nav">
                <div class="container">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="/">Home</a></li>
                        <li class="breadcrumb-item"><a href="/productList">Shop</a></li>
                        <li class="breadcrumb-item active" aria-current="page">Checkout</li>
                    </ol>
                </div>
            </nav>


            <div class="page-content">
                <div class="checkout">
                    <div class="container">
                        <!-- Coupon Section -->
                        <div class="checkout-discount mb-4">
                            <form id="couponForm" action="#">
                                <div class="input-group">
                                    <input type="text" class="form-control" id="couponCode" placeholder="coupon code">
                                    <div class="input-group-append">
                                        <button class="btn btn-outline-primary-2" type="submit"><i
                                                class="icon-long-arrow-right"></i></button>
                                    </div><!-- .End .input-group-append -->
                                </div>
                                <br>
                                <div id="couponMessage"></div>
                                <div id="appliedCoupon" style="display: none;">
                                    <span id="appliedCouponCode"></span>
                                    <button id="removeCoupon" class="btn btn-sm btn-outline-danger ml-2">
                                        <i class="icon-close"></i> Remove
                                    </button>
                                </div>
                            </form>
                            <button type="button" class="btn btn-outline-primary mt-3" id="coupon-btn">
                                <a href="#" data-bs-toggle="modal" data-bs-target="#showCouponModal">Show Coupons</a>
                            </button>
                        </div>
                        <form id="checkout">
                            <div class="row">
                                <div class="col-lg-9">
                                    <div class="row">
                                        <div class="col-lg-12">
                                            <h6>Shipping Address</h6>
                                            <% if (addresses && addresses.length> 0) { %>
                                                <div class="row">
                                                    <% addresses.forEach(address=> { %>
                                                        <div class="col-lg-6 col-md-6 mb-4">
                                                            <div class="card">
                                                                <div class="card-body">
                                                                    <h5 class="card-title">
                                                                        <%= address.name %>
                                                                    </h5>
                                                                    <p class="card-text">
                                                                        <%= address.address %><br>
                                                                            <%= address.landmark ? address.landmark
                                                                                + ', ' : '' %>
                                                                                <%= address.city %>, <%= address.state
                                                                                        %> - <%= address.pincode %><br>
                                                                                            <%= address.phone %>

                                                                    </p>
                                                                    <a href="#" data-bs-toggle="modal"
                                                                        data-bs-target="#editAddressModal<%=address._id%>">Edit
                                                                        <i class="icon-edit"></i></a>
                                                                    <a href="#" class="text-danger ms-2"
                                                                        onclick="deleteAddress('<%= address._id %>'); return false;">Delete</a>
                                                                    <div class="form-check">
                                                                        <input class="form-check-input" type="radio"
                                                                            name="selectedAddress"
                                                                            id="address<%= address._id %>"
                                                                            value="<%= address._id %>">
                                                                        <label class="form-check-label"
                                                                            for="address<%= address._id %>">
                                                                            Use this address
                                                                        </label>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <% }); %>
                                                </div>
                                                <% } else { %>
                                                    <p>No addresses found. Please add a new address.</p>
                                                    <% } %>
                                                        <button type="button" class="btn btn-outline-primary mb-3"
                                                            id="add-address-btn"><a href="" data-bs-toggle="modal"
                                                                data-bs-target="#addAddressModal"> <i
                                                                    class="icon-plus"></i> Add New
                                                                Address</a>

                                                        </button>
                                        </div>
                                    </div>





                                </div>
                                <aside class="col-lg-3">
                                    <table class="table table-summary">
                                        <thead>
                                            <tr>
                                                <th>Product</th>
                                                <th></th>
                                                <th></th>
                                                <th>Total</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <% if (items && items.length> 0) { %>
                                                <% items.forEach(item=> { %>
                                                    <tr data-item-id="<%= item.id %>">
                                                        <td>
                                                            <%= item.name %>
                                                        </td>
                                                        <td>
                                                            <% if (item.offer) { %>

                                                                <span
                                                                    style="text-decoration: line-through; color: red;">₹
                                                                    <%= item.originalPrice %>
                                                                </span>
                                                                <span>₹<%= item.discountedPrice%></span>

                                                                <small></small>
                                                                <% } else { %>
                                                                    ₹<%= item.originalPrice %>
                                                                        <% } %>
                                                        </td>

                                                    </tr>
                                                    <% }) %>

                                                        <tr class="summary-subtotal">
                                                            <td>Subtotal:</td>
                                                            <td colspan="3">₹<%= subtotal %>
                                                            </td>
                                                        </tr>
                                                        <tr id="couponDiscountRow" style="display: none;">
                                                            <td>Coupon Discount:</td>
                                                            <td>- ₹<span id="couponDiscount">0.00</span></td>
                                                            <td><span id="couponPercent">0.00</span>%</td>
                                                        </tr>
                                                        <tr>
                                                            <td>Shipping:</td>
                                                            <td colspan="3">Free shipping</td>
                                                        </tr>
                                                        <tr class="summary-total">
                                                            <td>Total:</td>
                                                            <td colspan="3" id="cart-total">₹<%= subtotal %>
                                                            </td>
                                                        </tr>
                                                        <% } else { %>
                                                            <tr>
                                                                <td colspan="4">Your cart is empty.</td>
                                                            </tr>
                                                            <% } %>

                                        </tbody>
                                    </table>






                                    <div class="accordion-summary" id="accordion-payment">
                                        <div class="card">
                                            <select id="sort-option" name="sort" class="form-control"
                                                style="color: black;">
                                                <option value="COD">CASH ON DELIVERY</option>
                                                <option value="UPI PAYMENT">UPI PAYMENT</option>

                                                <option value="WALLET">WALLET</option>




                                            </select>
                                        </div>
                                    </div>


                                    <div class="place-order" style="text-align: center; margin-top: 10px;">

                                        <button type="submit" class="btn btn-primary btn-block">Place Order </button>
                                    </div>










                            </div>
                            </aside>
                        </form>
                    </div>

                </div>
            </div>
    </div>
    </main>

    <footer class="footer">

        <div class="footer-middle">
            <div class="container">
                <div class="row">
                    <div class="col-sm-6 col-lg-3">
                        <div class="widget widget-about">
                            <img src="assets/images/wonder.png" class="footer-logo" alt="Footer Logo" width="150"
                                height="25">
                            <p>Praesent dapibus, neque id cursus ucibus, tortor neque egestas augue, eu
                                vulputate magna eros eu erat. </p>

                            <div class="widget-call">
                                <i class="icon-phone"></i>
                                Got Question? Call us 24/7
                                <a href="tel:#">+0123 456 789</a>
                            </div><!-- End .widget-call -->
                        </div><!-- End .widget about-widget -->
                    </div><!-- End .col-sm-6 col-lg-3 -->

                    <div class="col-sm-6 col-lg-3">
                        <div class="widget">
                            <h4 class="widget-title">Useful Links</h4><!-- End .widget-title -->

                            <ul class="widget-list">
                                <li><a href="about.html">About furnicom</a></li>
                                <li><a href="#">Our Services</a></li>
                                <li><a href="#">How to shop on furnicom</a></li>
                                <li><a href="faq.html">FAQ</a></li>
                                <li><a href="contact.html">Contact us</a></li>
                            </ul><!-- End .widget-list -->
                        </div><!-- End .widget -->
                    </div><!-- End .col-sm-6 col-lg-3 -->

                    <div class="col-sm-6 col-lg-3">
                        <div class="widget">
                            <h4 class="widget-title">Customer Service</h4><!-- End .widget-title -->

                            <ul class="widget-list">
                                <li><a href="#">Payment Methods</a></li>
                                <li><a href="#">Money-back guarantee!</a></li>
                                <li><a href="#">Returns</a></li>
                                <li><a href="#">Shipping</a></li>
                                <li><a href="#">Terms and conditions</a></li>
                                <li><a href="#">Privacy Policy</a></li>
                            </ul><!-- End .widget-list -->
                        </div><!-- End .widget -->
                    </div><!-- End .col-sm-6 col-lg-3 -->

                    <div class="col-sm-6 col-lg-3">
                        <div class="widget">
                            <h4 class="widget-title">My Account</h4><!-- End .widget-title -->

                            <ul class="widget-list">
                                <li><a href="#">Sign In</a></li>
                                <li><a href="cart.html">View Cart</a></li>
                                <li><a href="#">My Wishlist</a></li>
                                <li><a href="#">Track My Order</a></li>
                                <li><a href="#">Help</a></li>
                            </ul><!-- End .widget-list -->
                        </div><!-- End .widget -->
                    </div><!-- End .col-sm-6 col-lg-3 -->
                </div><!-- End .row -->
            </div><!-- End .container -->
        </div><!-- End .footer-middle -->

        <div class="footer-bottom">
            <div class="container">
                <p class="footer-copyright">Copyright © 2024 furnicom Store. All Rights Reserved.</p>
                <!-- End .footer-copyright -->
                <figure class="footer-payments">
                    <img src="assets/images/payments.png" alt="Payment methods" width="272" height="20">
                </figure><!-- End .footer-payments -->
            </div><!-- End .container -->
        </div><!-- End .footer-bottom -->
    </footer><!-- End .footer -->
    </div><!-- End .page-wrapper -->
    <button id="scroll-top" title="Back to Top"><i class="icon-arrow-up"></i></button>

    <!-- Mobile Menu -->
    <div class="mobile-menu-overlay"></div><!-- End .mobil-menu-overlay -->

    <div class="mobile-menu-container">
        <div class="mobile-menu-wrapper">
            <span class="mobile-menu-close"><i class="icon-close"></i></span>

            <form action="#" method="get" class="mobile-search">
                <label for="mobile-search" class="sr-only">Search</label>
                <input type="search" class="form-control" name="mobile-search" id="mobile-search"
                    placeholder="Search in..." required>
                <button class="btn btn-primary" type="submit"><i class="icon-search"></i></button>
            </form>


            <div class="social-icons">
                <a href="#" class="social-icon" target="_blank" title="Facebook"><i class="icon-facebook-f"></i></a>
                <a href="#" class="social-icon" target="_blank" title="Twitter"><i class="icon-twitter"></i></a>
                <a href="#" class="social-icon" target="_blank" title="Instagram"><i class="icon-instagram"></i></a>
                <a href="#" class="social-icon" target="_blank" title="Youtube"><i class="icon-youtube"></i></a>
            </div><!-- End .social-icons -->
        </div><!-- End .mobile-menu-wrapper -->
    </div><!-- End .footer -->
    </div><!-- End .page-wrapper -->
    <button id="scroll-top" title="Back to Top"><i class="icon-arrow-up"></i></button>

    <!-- Mobile Menu -->
    <div class="mobile-menu-overlay"></div><!-- End .mobil-menu-overlay -->

    <div class="mobile-menu-container">
        <div class="mobile-menu-wrapper">
            <span class="mobile-menu-close"><i class="icon-close"></i></span>

            <form action="#" method="get" class="mobile-search">
                <label for="mobile-search" class="sr-only">Search</label>
                <input type="search" class="form-control" name="mobile-search" id="mobile-search"
                    placeholder="Search in..." required>
                <button class="btn btn-primary" type="submit"><i class="icon-search"></i></button>
            </form>

            <nav class="mobile-nav">
                <ul class="mobile-menu">
                    <li class="active">
                        <a href="index.html">Home</a>


                    </li>
                    <li>
                        <a href="category.html">Shop</a>

                    </li>
                    <li>
                        <a href="product.html" class="sf-with-ul">Product</a>

                    </li>
                    <li>
                        <a href="#">Pages</a>
                        <ul>
                            <li>
                                <a href="about.html">About</a>


                            </li>
                            <li>
                                <a href="contact.html">Contact</a>


                            </li>
                            <li><a href="login.html">Login</a></li>
                            <li><a href="faq.html">FAQs</a></li>
                            <li><a href="404.html">Error 404</a></li>
                            <li><a href="coming-soon.html">Coming Soon</a></li>
                        </ul>
                    </li>
                    <li>
                        <a href="blog.html">Blog</a>

                        <ul>
                            <li><a href="blog.html">Classic</a></li>
                            <li><a href="blog-listing.html">Listing</a></li>
                            <li>
                                <a href="#">Grid</a>

                            </li>
                            <li>
                                <a href="#">Masonry</a>

                            </li>
                            <li>
                                <a href="#">Mask</a>

                            </li>
                            <li>
                                <a href="#">Single Post</a>

                            </li>
                        </ul>
                    </li>
                    <li>
                        <a href="elements-list.html">Elements</a>

                    </li>
                </ul>
            </nav><!-- End .mobile-nav -->

            <div class="social-icons">
                <a href="#" class="social-icon" target="_blank" title="Facebook"><i class="icon-facebook-f"></i></a>
                <a href="#" class="social-icon" target="_blank" title="Twitter"><i class="icon-twitter"></i></a>
                <a href="#" class="social-icon" target="_blank" title="Instagram"><i class="icon-instagram"></i></a>
                <a href="#" class="social-icon" target="_blank" title="Youtube"><i class="icon-youtube"></i></a>
            </div><!-- End .social-icons -->
        </div><!-- End .mobile-menu-wrapper -->
    </div>



    <div class="modal fade" id="addAddressModal" tabindex="-1" aria-labelledby="addAddressModalLabel"
        aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content" style="border-radius: 10px;">
                <div class="modal-header">
                    <h5 class="modal-title" id="addAddressModalLabel">Add New Address</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" style="padding: 20px;">
                    <form id="addAddressForm" novalidate>
                        <div class="mb-3 form-group">
                            <label for="name" class="form-label errMsg">Name</label>
                            <input type="text" class="form-control" id="name" value="">
                            <div class="invalid-feedback">Name is required and should only contain alphabets.</div>
                        </div>
                        <div class="mb-3 form-group">
                            <label for="phone" class="form-label errMsg">Phone Number</label>
                            <input type="tel" class="form-control" id="phone" value="">
                            <div class="invalid-feedback">Phone number is required and must be 10 digits.</div>
                        </div>
                        <div class="mb-3 form-group">
                            <label for="address" class="form-label errMsg">Address</label>
                            <textarea class="form-control" id="address" rows="3"></textarea>
                            <div class="invalid-feedback">Address is required.</div>
                        </div>
                        <div class="mb-3 form-group">
                            <label for="city" class="form-label errMsg">Town/City</label>
                            <input type="text" class="form-control" id="city" value="">
                            <div class="invalid-feedback">City is required.</div>
                        </div>
                        <div class="mb-3 form-group">
                            <label for="pincode" class="form-label errMsg">PinCode</label>
                            <input type="text" class="form-control" id="pincode" value="">
                            <div class="invalid-feedback">PinCode is required and must be 6 digits.</div>
                        </div>
                        <div class="mb-3 form-group">
                            <label for="landmark" class="form-label errMsg">Landmark <span
                                    class="text-muted">(optional)</span></label>
                            <input type="text" class="form-control" id="landmark" value="">
                        </div>
                        <div class="mb-3 form-group">
                            <label for="state" class="form-label errMsg">State</label>
                            <input type="text" class="form-control" id="state" value="">
                            <div class="invalid-feedback">State is required.</div>
                        </div>
                        <input type="hidden" id="hiddenid" value="<%= user?._id%>">

                        <button type="submit" class="btn btn-primary">Submit</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </form>
                </div>
            </div>
        </div>
    </div>



    <% addresses.forEach(address=> { %>
        <div class="modal fade" id="editAddressModal<%=address._id%>" tabindex="-1"
            aria-labelledby="editAddressModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content" style="border-radius: 10px;">
                    <div class="modal-header">
                        <h5 class="modal-title" id="editAddressModalLabel">Edit Address</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body" style="padding: 20px;">
                        <form id="editAddressForm<%= address._id %>" class="edit-address-form"
                            data-address-id="<%= address._id %>">
                            <div class="mb-3 form-group">
                                <label for="edit-name-<%= address._id %>" class="form-label error-message">Name</label>
                                <input type="text" class="form-control" id="edit-name-<%= address._id %>"
                                    value="<%=address.name%>">
                            </div>
                            <div class="mb-3 form-group">
                                <label for="edit-phone-<%= address._id %>" class="form-label error-message">Phone
                                    Number</label>
                                <input type="tel" class="form-control" id="edit-phone-<%= address._id %>"
                                    value="<%=address.phone%>">
                            </div>
                            <div class="mb-3 form-group">
                                <label for="edit-address-<%= address._id %>"
                                    class="form-label error-message">Address</label>
                                <textarea class="form-control" id="edit-address-<%= address._id %>"
                                    rows="3"><%= address.address %></textarea>

                            </div>
                            <div class="mb-3 form-group">
                                <label for="edit-city-<%= address._id %>"
                                    class="form-label error-message">Town/City</label>
                                <input type="text" class="form-control" id="edit-city-<%= address._id %>"
                                    value="<%=address.city%>">
                            </div>
                            <div class="mb-3 form-group">
                                <label for="edit-pincode-<%= address._id %>"
                                    class="form-label error-message">PinCode</label>
                                <input type="text" class="form-control" id="edit-pincode-<%= address._id %>"
                                    value="<%=address.pincode%>">
                            </div>
                            <div class="mb-3 form-group">
                                <label for="edit-landmark-<%= address._id %>" class="form-label error-message">Landmark
                                    <span class="text-muted">(optional)</span></label>
                                <input type="text" class="form-control" id="edit-landmark-<%= address._id %>"
                                    value="<%=address.landmark%>">
                            </div>
                            <div class="mb-3 form-group">
                                <label for="edit-state-<%= address._id %>"
                                    class="form-label error-message">State</label>
                                <input type="text" class="form-control" id="edit-state-<%= address._id %>"
                                    value="<%=address.state%>">
                            </div>
                            <input type="hidden" id="edit-hiddenid-<%= address._id %>" value="<%= address._id%>">
                            <button type="submit" class="btn btn-primary">Save
                                changes</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <%});%>




            <div class="modal fade" id="showCouponModal" tabindex="-1" aria-labelledby="showCouponModalLabel"
                aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="editAddressModalLabel">Coupons</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body pl-5 pr-5">
                            <% coupons.forEach((x)=>{ %>
                                <div class="mb-3 form-group">
                                    <%= x.couponId %> <span class="text-danger">
                                            <%= x.discount %>% Off
                                        </span>
                                </div>
                                <%})%>
                        </div>

                    </div>
                </div>
            </div>




            <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

            <script>

                function showError(input, message) {
                    const formGroup = input.parentElement;
                    const feedback = formGroup.querySelector('.invalid-feedback');
                    input.classList.add('is-invalid');
                    feedback.textContent = message;
                    feedback.style.display = 'block';
                }


                function removeError(input) {
                    const formGroup = input.parentElement;
                    const feedback = formGroup.querySelector('.invalid-feedback');
                    input.classList.remove('is-invalid');
                    feedback.style.display = 'none';
                }


                function validateInput() {
                    let isValid = true;

                    const name = document.getElementById('name');
                    const phone = document.getElementById('phone');
                    const address = document.getElementById('address');
                    const city = document.getElementById('city');
                    const pincode = document.getElementById('pincode');
                    const state = document.getElementById('state');


                    const namePattern = /^[A-Za-z\s]+$/;
                    if (name.value.trim() === '') {
                        showError(name, 'Name is required');
                        isValid = false;
                    } else if (name.value.trim().length < 3) {
                        showError(name, 'Name should be more than 2 letters');
                        isValid = false;
                    } else if (!namePattern.test(name.value)) {
                        showError(name, 'Name should only contain alphabets and spaces');
                        isValid = false;
                    } else {
                        removeError(name);
                    }



                    const phonePattern = /^[689]\d{9}$/;
                    if (!phonePattern.test(phone.value)) {
                        showError(phone, 'Phone number must be 10 digits and start with 8, 9, or 6');
                        isValid = false;
                    } else {
                        removeError(phone);
                    }


                    const addressPattern = /^[a-zA-Z0-9\s,\'\-]*$/;

                    if (address.value.trim() === '') {
                        showError(address, 'Address is required');
                        isValid = false;
                    } else if (address.value.trim().length < 6) {
                        showError(address, 'Address must be at least 6 characters long');
                        isValid = false;
                    } else if (!addressPattern.test(address.value.trim())) {
                        showError(address, 'Address can only contain letters, numbers, spaces, commas, single quotes, and hyphens');
                        isValid = false;
                    } else {
                        removeError(address);
                    }


                    const cityPattern = /^[A-Za-z\s]+$/;
                    if (city.value.trim() === '' || !cityPattern.test(city.value)) {
                        showError(city, 'City is required and should only contain letters');
                        isValid = false;
                    } else {
                        removeError(city);
                    }


                    const pincodePattern = /^\d{6}$/;
                    if (!pincodePattern.test(pincode.value)) {
                        showError(pincode, 'Pincode must be exactly 6 digits');
                        isValid = false;
                    } else {
                        removeError(pincode);
                    }


                    const statePattern = /^[A-Za-z\s]+$/;
                    if (state.value.trim() === '' || !statePattern.test(state.value)) {
                        showError(state, 'State is required and should only contain letters');
                        isValid = false;
                    } else {
                        removeError(state);
                    }

                    return isValid;
                }


                document.getElementById('addAddressForm').addEventListener('submit', async function (e) {
                    e.preventDefault();

                    if (validateInput()) {
                        const formData = {
                            name: document.getElementById('name').value.trim(),
                            phone: document.getElementById('phone').value.trim(),
                            address: document.getElementById('address').value.trim(),
                            city: document.getElementById('city').value.trim(),
                            landmark: document.getElementById('landmark').value.trim(),
                            state: document.getElementById('state').value.trim(),
                            pincode: document.getElementById('pincode').value.trim(),
                            id: document.getElementById('hiddenid').value.trim(),
                        };

                        console.log('Submitting Form Data:', formData); // Debug log

                        try {
                            const response = await fetch('/addAddress', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify(formData),
                            });

                            const data = await response.json();
                            console.log('Server Response:', data); // Debug log

                            if (data.success) {
                                Swal.fire({
                                    title: 'Success!',
                                    text: data.message,
                                    icon: 'success',
                                    confirmButtonText: 'OK',
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        window.location.href = '/checkout';
                                    }
                                });
                            } else {
                                Swal.fire({
                                    title: 'Error!',
                                    text: data.message,
                                    icon: 'error',
                                    confirmButtonText: 'OK',
                                });
                            }
                        } catch (error) {
                            console.error('Error during address submission:', error);
                            Swal.fire({
                                title: 'Error!',
                                text: 'An unexpected error occurred',
                                icon: 'error',
                                confirmButtonText: 'OK',
                            });
                        }
                    }
                });


                document.addEventListener('DOMContentLoaded', function () {
                    const editAddressForms = document.querySelectorAll('.edit-address-form');


                    function showError(element, message) {
                        let errorElement = element.nextElementSibling;
                        if (!errorElement || !errorElement.classList.contains('error-message')) {
                            errorElement = document.createElement('div');
                            errorElement.classList.add('error-message');
                            errorElement.style.color = 'red';
                            element.parentNode.insertBefore(errorElement, element.nextSibling);
                        }
                        errorElement.textContent = message;
                    }


                    function removeError(element) {
                        const errorElement = element.nextElementSibling;
                        if (errorElement && errorElement.classList.contains('error-message')) {
                            errorElement.remove();
                        }
                    }


                    function validateAddressForm(name, phone, address, city, state, pincode) {
                        let isValid = true;


                        const namePattern = /^[A-Za-z\s]+$/;
                        if (name.value.trim() === '') {
                            showError(name, 'Name is required');
                            isValid = false;
                        } else if (name.value.trim().length < 3) {
                            showError(name, 'Name should be more than 2 letters');
                            isValid = false;
                        } else if (!namePattern.test(name.value)) {
                            showError(name, 'Name should only contain alphabets and spaces');
                            isValid = false;
                        } else {
                            removeError(name);
                        }


                        const phonePattern = /^[689]\d{9}$/;
                        if (!phonePattern.test(phone.value)) {
                            showError(phone, 'Phone number must be 10 digits and start with 8, 9, or 6');
                            isValid = false;
                        } else {
                            removeError(phone);
                        }


                        const addressPattern = /^[a-zA-Z0-9][a-zA-Z0-9\s,'-]*[a-zA-Z0-9]$/;
                        if (address.value.trim() === '') {
                            showError(address, 'Address is required');
                            isValid = false;
                        } else if (address.value.length < 6) {
                            showError(address, 'Address must be at least 6 characters long');
                            isValid = false;
                        } else if (!addressPattern.test(address.value)) {
                            showError(address, 'Address must contain only letters, numbers, spaces, commas, apostrophes, and hyphens, without special characters at the start or end');
                            isValid = false;
                        } else {
                            removeError(address);
                        }


                        const cityPattern = /^[A-Za-z\s]+$/;
                        if (city.value.trim() === '' || !cityPattern.test(city.value)) {
                            showError(city, 'City is required and should only contain letters');
                            isValid = false;
                        } else {
                            removeError(city);
                        }


                        const pincodePattern = /^\d{6}$/;
                        if (!pincodePattern.test(pincode.value)) {
                            showError(pincode, 'Pincode must be exactly 6 digits');
                            isValid = false;
                        } else {
                            removeError(pincode);
                        }


                        const statePattern = /^[A-Za-z\s]+$/;
                        if (state.value.trim() === '' || !statePattern.test(state.value)) {
                            showError(state, 'State is required and should only contain letters');
                            isValid = false;
                        } else {
                            removeError(state);
                        }

                        return isValid;
                    }




                    editAddressForms.forEach(form => {
                        form.addEventListener('submit', function (event) {
                            event.preventDefault();
                            const addressId = this.getAttribute('data-address-id');

                            const edit_name = document.getElementById(`edit-name-${addressId}`);
                            const edit_phone = document.getElementById(`edit-phone-${addressId}`);
                            const edit_address = document.getElementById(`edit-address-${addressId}`);
                            const edit_city = document.getElementById(`edit-city-${addressId}`);
                            const edit_state = document.getElementById(`edit-state-${addressId}`);
                            const edit_pincode = document.getElementById(`edit-pincode-${addressId}`);
                            const edit_hidden = document.getElementById(`edit-hiddenid-${addressId}`);

                            if (validateAddressForm(edit_name, edit_phone, edit_address, edit_city, edit_state, edit_pincode)) {

                                edit_submitAddressForm(edit_name, edit_phone, edit_address, edit_city, edit_state, edit_pincode, edit_hidden);
                            }
                        });
                    });

                    async function edit_submitAddressForm(edit_name, edit_phone, edit_address, edit_city, edit_state, edit_pincode, edit_hidden) {
                        try {
                            const response = await fetch(`/api/addresses/${edit_hidden.value}`, {
                                method: 'PUT',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({
                                    name: edit_name.value,
                                    phone: edit_phone.value,
                                    address: edit_address.value,
                                    city: edit_city.value,
                                    state: edit_state.value,
                                    pincode: edit_pincode.value,
                                })
                            });

                            const data = await response.json();
                            if (data.success) {
                                Swal.fire({
                                    title: 'Success!',
                                    text: data.message,
                                    icon: 'success',
                                    confirmButtonText: 'OK'
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        window.location.href = "/checkout";
                                    }
                                });
                            } else {
                                Swal.fire({
                                    title: 'Error!',
                                    text: data.message,
                                    icon: 'error',
                                    confirmButtonText: 'OK'
                                });
                            }
                        } catch (error) {
                            console.error('Error during address update:', error);
                        }
                    }
                });







                function deleteAddress(addressId) {
                    Swal.fire({
                        title: 'Are you sure?',
                        text: "You won't be able to revert this!",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'Yes, delete it!',
                        cancelButtonText: 'Cancel'
                    }).then((result) => {
                        if (result.isConfirmed) {

                            fetch(`/api/addresses/${addressId}`, {
                                method: 'DELETE',
                            })
                                .then(response => {
                                    if (!response.ok) {
                                        return response.json().then(err => Promise.reject(err));
                                    }
                                    return response.json();
                                })
                                .then(data => {
                                    if (data.success) {
                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Deleted!',
                                            text: 'Your address has been deleted successfully.',
                                            confirmButtonText: 'OK',
                                        }).then(() => {
                                            location.reload();
                                        });
                                    } else {
                                        throw new Error(data.message || 'Failed to delete the address.');
                                    }
                                })
                                .catch(error => {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error!',
                                        text: 'There was a problem deleting the address: ' + (error.message || 'Unknown error'),
                                        confirmButtonText: 'OK',
                                    });
                                });
                        }
                    });
                }
            </script>
            <script>
                document.addEventListener('DOMContentLoaded', function () {
                    const checkoutForm = document.getElementById('checkout');

                    checkoutForm.addEventListener('submit', async function (e) {
                        e.preventDefault();






                        const submitButton = checkoutForm.querySelector('button[type="submit"]');
                        submitButton.disabled = true;

                        try {
                            const couponDiscountElement = document.getElementById('couponDiscount');
                            const couponDiscount = couponDiscountElement ? parseFloat(couponDiscountElement.textContent) : 0;


                            // const couponPercentElement = document.getElementById('couponPercent');
                            // const couponPercent = couponPercentElement ? parseFloat(couponPercentElement.textContent) : 0;


                            let totalOfferPrice = 0;

                            // Iterate through rows with data-item-id
                            document.querySelectorAll('tr[data-item-id]').forEach(row => {
                                const discountedPriceElement = row.querySelector('span:not([style])'); // Select the discounted price span
                                if (discountedPriceElement) {
                                    const price = parseFloat(discountedPriceElement.textContent.replace('₹', '').trim());
                                    if (!isNaN(price)) {
                                        totalOfferPrice += price;
                                    }
                                }
                            });
                            // Validate address selection
                            const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
                            if (!selectedAddress) {
                                Swal.fire({
                                    title: 'Error!',
                                    text: 'Please select a delivery address',
                                    icon: 'error',
                                    confirmButtonText: 'OK'
                                });
                                submitButton.disabled = false;
                                return;
                            }

                            // Get payment type
                            const paymentType = document.getElementById('sort-option').value;
                            if (!paymentType) {
                                Swal.fire({
                                    title: 'Error!',
                                    text: 'Please select a payment method',
                                    icon: 'error',
                                    confirmButtonText: 'OK'
                                });
                                submitButton.disabled = false;
                                return;
                            }

                            // Show loading state
                            Swal.fire({
                                title: 'Processing...',
                                text: 'Please wait while we process your order',
                                allowOutsideClick: false,
                                allowEscapeKey: false,
                                showConfirmButton: false,
                                didOpen: () => {
                                    Swal.showLoading();
                                }
                            });




                            switch (paymentType) {
                                case 'COD':
                                    try {
                                        const couponCode = document.getElementById('couponCode')?.textContent || '';
                                        const totalAmountText = document.getElementById('cart-total')?.innerText || '0';
                                        const totalAmount = parseFloat(totalAmountText.replace(/[^0-9.]/g, ''));
                                        if (totalAmount > 1000) {
                                            Swal.fire({
                                                title: 'COD Not Available',
                                                text: 'Cash on Delivery is not available for orders above ₹1000. Please choose another payment method.',
                                                icon: 'warning',
                                                confirmButtonText: 'OK'
                                            });
                                            setTimeout(() => {
                                                Swal.close();
                                            }, 2000);
                                            return;
                                        }

                                        const codResponse = await fetch('/place-order', {
                                            method: 'POST',
                                            headers: { 'Content-Type': 'application/json' },
                                            body: JSON.stringify({
                                                address_id: selectedAddress.value,
                                                payment_type: paymentType,
                                                couponDiscount: couponDiscount || 0,
                                                totalOfferPrice: totalOfferPrice || 0,
                                                totalAmount
                                            })
                                        });

                                        const response = await codResponse.json();
                                        handleOrderResponse(response);
                                    } catch (error) {
                                        console.error('COD Error:', error);
                                        Swal.fire({ title: 'Error!', text: 'Failed to place order. Try again.', icon: 'error', confirmButtonText: 'OK' });
                                    }
                                    break;





                                case 'WALLET':
                                    const totalAmountTextWallet = document.getElementById('cart-total')?.innerText || '0';
                                    const totalAmountWallet = parseFloat(totalAmountTextWallet.replace(/[^0-9.]/g, ''));
                                    

                                    try {
                                        const walletResponse = await fetch('/check-wallet-balance', {
                                            method: 'POST',
                                            headers: { 'Content-Type': 'application/json' },
                                            body: JSON.stringify({
                                                user_id: '<%= user._id %>',
                                                totalAmount: totalAmountWallet,

                                            })
                                        });

                                        const walletResult = await walletResponse.json();

                                        if (walletResult.success) {
                                            const placeOrderResponse = await fetch('/place-order', {
                                                method: 'POST',
                                                headers: { 'Content-Type': 'application/json' },
                                                body: JSON.stringify({
                                                    user_id: '<%= user._id %>',
                                                    address_id: selectedAddress.value,
                                                    payment_type: 'WALLET',
                                                    couponDiscount: couponDiscount || 0,
                                                    totalOfferPrice: totalOfferPrice || totalAmountWallet,
                                                    totalAmount: totalAmountWallet
                                                })
                                            });

                                            const orderResult = await placeOrderResponse.json();
                                            handleOrderResponse(orderResult);
                                        } else {
                                            Swal.fire({
                                                title: 'Insufficient Balance',
                                                text: walletResult.message,
                                                icon: 'error',
                                                confirmButtonText: 'OK'
                                            });
                                        }
                                    } catch (error) {
                                        Swal.fire({
                                            title: 'Error!',
                                            text: 'An error occurred while processing your wallet payment.',
                                            icon: 'error',
                                            confirmButtonText: 'OK'
                                        });
                                        console.error(error);
                                    }
                                    break;

                                case 'UPI PAYMENT':
                                    try {
                                       
                                        const orderDetailsResponse = await fetch('/create-razorpay-order', {
                                            method: 'POST',
                                            headers: {
                                                'Content-Type': 'application/json'
                                            },
                                            body: JSON.stringify({
                                                selectedAddress: selectedAddress.value,
                                                payment_type: paymentType,
                                                totalAmount: parseFloat(document.getElementById('cart-total').innerText.replace('₹', '').trim()) // Pass the total amount

                                            })
                                        });

                                        const orderData = await orderDetailsResponse.json();

                                        if (!orderData.success) {
                                            throw new Error(orderData.message);
                                        }

                                       
                                        orderData.selectedAddress = selectedAddress.value;
                                        orderData.paymentType = paymentType;

                                       
                                        const options = {
                                            key: orderData.key, 
                                            amount: orderData.amount,
                                            currency: orderData.currency,
                                            order_id: orderData.razorpayOrderId,
                                            name: 'wood & wonder',
                                            description: 'Order Payment',
                                            handler: async function (response) {
                                               
                                                response.selectedAddress = selectedAddress.value;
                                                response.paymentType = paymentType;

                                                await verifyPayment(response, orderData);
                                            },
                                            modal: {
                                                ondismiss: function () {
                                                    handlePaymentFailure('Payment cancelled by user.', orderData);
                                                }
                                            },
                                            prefill: {
                                                name: orderData.customerName,
                                                email: orderData.customerEmail,
                                                contact: orderData.customerPhone
                                            },
                                            theme: {
                                                color: '#3399cc'
                                            }
                                        };

                                        const razorpayInstance = new Razorpay(options);

                                        razorpayInstance.on('payment.failed', function (response) {
                                            handlePaymentFailure(
                                                response.error.description || 'Payment failed. Please try again.',
                                                { ...orderData, selectedAddress: selectedAddress.value, paymentType }
                                            );
                                        });

                                        razorpayInstance.open();
                                    } catch (error) {

                                        console.error('Error:', error);
                                        handlePaymentFailure('An unexpected error occurred. Please try again.', {
                                            selectedAddress: selectedAddress.value,
                                            paymentType
                                        });
                                        Swal.fire({
                                            title: 'Error!',
                                            text: 'An unexpected error occurred. Please try again.',
                                            icon: 'error',
                                            confirmButtonText: 'OK'
                                        });
                                    }
                                    break;

                                default:
                                    throw new Error('Invalid payment method selected');

                            }

                        } catch (error) {
                            console.error('Error:', error);
                            handlePaymentFailure('An unexpected error occurred. Please try again.');

                            Swal.fire({
                                title: 'Error!',
                                text: 'An unexpected error occurred. Please try again.',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                            submitButton.disabled = false;
                        }
                    });
                });

                async function verifyPayment(response, orderData) {
                    try {
                        if (!response.razorpay_payment_id || !response.razorpay_order_id || !response.razorpay_signature) {
                            throw new Error('Missing required payment verification parameters');
                        }

                        const verificationResponse = await fetch('/verify-payment', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                razorpay_payment_id: response.razorpay_payment_id,
                                razorpay_order_id: response.razorpay_order_id,
                                razorpay_signature: response.razorpay_signature,
                                address_id: response.selectedAddress,
                                couponDiscount: orderData.couponDiscount || 0,
                                totalOfferPrice: orderData.totalOfferPrice || 0,
                                totalAmount: parseFloat(document.getElementById('cart-total').innerText.replace('₹', '').trim()) // Pass the total amount

                            })
                        });

                        const verificationData = await verificationResponse.json();

                        if (verificationData.success && verificationData.id) {
                            handleOrderResponse(verificationData);
                        } else {
                            throw new Error(verificationData.message || 'Payment verification failed');
                        }
                    } catch (error) {
                        console.error('Payment verification error:', error);
                        handlePaymentFailure(error.message || 'Payment verification failed. Please try again.', orderData);
                    }
                }


                function handleOrderResponse(data) {
                    if (data.success && data.id) {

                        Swal.fire({
                            title: 'Order Placed Successfully!',
                            icon: 'success',
                            confirmButtonText: 'View Order',
                            showCancelButton: false,
                            allowOutsideClick: false
                        }).then((result) => {
                            if (result.isConfirmed) {
                                window.location.href = `/orderSummary/${data.id}`;
                            }
                        });
                    } else {
                        handlePaymentFailure(data.message || 'Order processing failed');
                    }
                }

                function handlePaymentFailure(errorMessage, orderData = {}) {
                    console.error('Payment failed:', errorMessage);
                    Swal.fire({
                        title: 'Payment Failed',
                        text: errorMessage,
                        icon: 'error',
                        confirmButtonText: 'Try Again'
                    });
                }

                async function handlePaymentFailure(errorMessage, orderData) {
                    try {

                        Swal.fire({
                            title: 'Processing...',
                            text: 'Handling payment failure. Please wait.',
                            icon: 'info',
                            showConfirmButton: false,
                            allowOutsideClick: false,
                            timerProgressBar: true
                        });


                        const failedOrderResponse = await fetch('/save-failed-order', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                ...orderData,
                                errorMessage: errorMessage,
                                totalAmount: parseFloat(document.getElementById('cart-total').innerText.replace('₹', '').trim()) // Pass the total amount

                            })
                        });

                        const failedOrderData = await failedOrderResponse.json();

                        if (failedOrderData.success) {
                            console.log('Failed order saved successfully.');
                        } else {
                            console.error('Error saving failed order:', failedOrderData.error || 'Unknown error');
                        }

                        const orderId = failedOrderData.orderId || 'unknown';
                        window.location.href = `/orderSummary/${orderId}`;
                    } catch (error) {
                        console.error('Error saving failed order:', error);
                        Swal.fire({
                            title: 'Error!',
                            text: 'An unexpected error occurred while handling payment failure. Please try again.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                }
            </script>
            <script>

document.addEventListener('DOMContentLoaded', () => {
    const couponForm = document.getElementById('couponForm');
    const couponInput = document.getElementById('couponCode');
    const appliedCouponDiv = document.getElementById('appliedCoupon');
    const appliedCouponCode = document.getElementById('appliedCouponCode');
    const removeCouponBtn = document.getElementById('removeCoupon');

    const validateCouponInput = (couponCode) => {
        if (!couponCode || couponCode.trim().length === 0) {
            throw new Error('Please enter a valid coupon code');
        }
        if (couponCode.length > 20) {
            throw new Error('Coupon code is too long');
        }
        return couponCode.trim().toUpperCase();
    };

    const getSubtotal = () => {
      
        const subtotalValue = 
           
            document.querySelector('[data-subtotal]')?.dataset.subtotal ||
         
            document.getElementById('cart-subtotal')?.dataset.value ||
            document.getElementById('cart-subtotal')?.textContent?.replace('₹', '') ||
          
            window.cartSubtotal ||
            '<%= subtotal %>';  

        const subtotal = parseFloat(subtotalValue);
        
        if (isNaN(subtotal) || subtotal <= 0) {
            throw new Error('Unable to determine cart total. Please refresh the page or contact support.');
        }
        
        return subtotal;
    };

    const displayCouponMessage = (message, isSuccess) => {
        const messageElement = document.getElementById('couponMessage');
        if (!messageElement) return;
        
        messageElement.innerHTML = `
            <p class="${isSuccess ? 'text-success' : 'text-danger'} font-weight-bold">
                ${message}
            </p>
        `;
    };

    const showAppliedCoupon = (couponCode) => {
        if (!appliedCouponCode || !appliedCouponDiv || !couponInput) return;
        
        appliedCouponCode.textContent = `Applied Coupon: ${couponCode}`;
        appliedCouponDiv.style.display = 'block';
        couponInput.disabled = true;
    };

    const hideAppliedCoupon = () => {
        if (!appliedCouponDiv || !couponInput) return;
        
        appliedCouponDiv.style.display = 'none';
        couponInput.disabled = false;
        couponInput.value = '';
    };

    const updateItemPrices = (items, subtotal, discountAmount) => {
        items.forEach(item => {
            const itemPrice = parseFloat(item.dataset.price);
            const itemQuantity = parseInt(item.dataset.quantity);
            
            if (isNaN(itemPrice) || isNaN(itemQuantity)) return;
            
            const itemTotal = itemPrice * itemQuantity;
            const itemDiscount = (itemTotal / subtotal) * discountAmount;
            const discountedPrice = (itemPrice - (itemDiscount / itemQuantity)).toFixed(2);
            
            const priceElement = item.querySelector('.item-price');
            if (priceElement) {
                priceElement.innerHTML = `
                    <span class="original-price text-muted"><s>₹${itemPrice.toFixed(2)}</s></span>
                    <span class="discounted-price">₹${discountedPrice}</span>
                `;
            }
        });
    };

    const updateTotals = (data) => {
        const elements = {
            discountRow: document.getElementById('couponDiscountRow'),
            discountAmount: document.getElementById('couponDiscount'),
            discountPercent: document.getElementById('couponPercent'),
            cartTotal: document.getElementById('cart-total')
        };

        if (elements.discountRow) elements.discountRow.style.display = 'table-row';
        if (elements.discountAmount) elements.discountAmount.textContent = data.discountAmount.toFixed(2);
        if (elements.discountPercent) elements.discountPercent.textContent = data.discountPercent;
        if (elements.cartTotal) elements.cartTotal.textContent = `₹${data.newTotal.toFixed(2)}`;
    };

    if (couponForm) {
        couponForm.addEventListener('submit', async function(e) {
            e.preventDefault();

            try {
                const couponCode = validateCouponInput(couponInput.value);
                const subtotal = getSubtotal();

                console.log('Submitting coupon:', couponCode, 'Subtotal:', subtotal); // Debug log

                const response = await fetch('/applyCoupon', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ couponCode, subtotal })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to apply coupon');
                }

                const data = await response.json();

                if (data.success) {
                    const items = document.querySelectorAll('.cart-item');
                    updateItemPrices(items, subtotal, data.discountAmount);
                    updateTotals(data);
                    displayCouponMessage(data.message, true);
                    showAppliedCoupon(couponCode);
                } else {
                    displayCouponMessage(data.message, false);
                }
            } catch (error) {
                console.error('Error applying coupon:', error);
                displayCouponMessage(error.message || 'An error occurred while applying the coupon', false);
            }
        });

        if (removeCouponBtn) {
            removeCouponBtn.addEventListener('click', hideAppliedCoupon);
        }
    }




                    removeCouponBtn.addEventListener('click', function (e) {
                        e.preventDefault();

                 
                        const subtotal = parseFloat('<%= subtotal %>');

                        fetch('/removeCoupon', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ subtotal })
                        })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                  
                                    const discountRow = document.getElementById('couponDiscountRow');
                                    const cartTotalElem = document.getElementById('cart-total');

                                    if (discountRow) discountRow.style.display = 'none';
                                    if (cartTotalElem) cartTotalElem.textContent = `₹${ data.newTotal.toFixed(2) }`;

                               
                                    displayCouponMessage('Coupon removed successfully', true);

                                    hideAppliedCoupon();
                                } else {
                                
                                    displayCouponMessage(data.message, false);
                                }
                            })
                            .catch(error => {
                                console.error('Error removing coupon:', error);
                                displayCouponMessage('An error occurred while removing the coupon', false);
                            });
                    });

                });

            </script>


            <%- include ('../../layout/footer.ejs') %>